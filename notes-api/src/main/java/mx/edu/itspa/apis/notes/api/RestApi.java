/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package mx.edu.itspa.apis.notes.api;

import mx.edu.itspa.apis.notes.model.Error;
import mx.edu.itspa.apis.notes.model.Note;
import mx.edu.itspa.apis.notes.model.NoteData;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-11-18T22:01:45.408385500-08:00[America/Los_Angeles]")
@Validated
@Api(value = "rest", description = "the rest API")
public interface RestApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /rest/api/v1/notes : Create a new note.
     * Use this endpoint create a new note.
     *
     * @param noteData Contains required data to create a note (required)
     * @return Empty response indicating the operation succeded. (status code 201)
     *         or Default error response containing a list of errors. (status code 500)
     */
    @ApiOperation(value = "Create a new note.", nickname = "createNote", notes = "Use this endpoint create a new note.", tags={ "CREATE", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Empty response indicating the operation succeded."),
        @ApiResponse(code = 500, message = "Default error response containing a list of errors.", response = Error.class) })
    @PostMapping(
        value = "/rest/api/v1/notes",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> createNote(@ApiParam(value = "Contains required data to create a note" ,required=true )  @Valid @RequestBody NoteData noteData) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/v1/notes/{id} : Delete a note
     * Use this endpoint to delete an existing note.
     *
     * @param id  (required)
     * @return Empty response indicating the operation succeded. (status code 204)
     *         or Not found error response. (status code 404)
     *         or Default error response containing a list of errors. (status code 500)
     */
    @ApiOperation(value = "Delete a note", nickname = "deleteNote", notes = "Use this endpoint to delete an existing note.", tags={ "DELETE", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Empty response indicating the operation succeded."),
        @ApiResponse(code = 404, message = "Not found error response.", response = Error.class),
        @ApiResponse(code = 500, message = "Default error response containing a list of errors.", response = Error.class) })
    @DeleteMapping(
        value = "/rest/api/v1/notes/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> deleteNote(@ApiParam(value = "",required=true) @PathVariable("id") UUID id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/v1/notes : Retrieve a list of all the notes
     * Use this endpoint retrieve a a list of all the existing notes
     *
     * @return Response containing a list of notes. (status code 200)
     *         or Default error response containing a list of errors. (status code 500)
     */
    @ApiOperation(value = "Retrieve a list of all the notes", nickname = "getAllNotes", notes = "Use this endpoint retrieve a a list of all the existing notes", response = Note.class, responseContainer = "List", tags={ "READ", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Response containing a list of notes.", response = Note.class, responseContainer = "List"),
        @ApiResponse(code = 500, message = "Default error response containing a list of errors.", response = Error.class) })
    @GetMapping(
        value = "/rest/api/v1/notes",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Note>> getAllNotes() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"title\" : \"Note title\", \"priority\" : 0, \"createdOn\" : \"2021-01-30T08:30:00Z\", \"content\" : \"Note content\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/v1/notes/{id} : Retrieves a note by Id.
     * Use this endpoint to retrieve a specific note by its unique identifier.
     *
     * @param id  (required)
     * @return Response containing a single note. (status code 200)
     *         or Not found error response. (status code 404)
     *         or Default error response containing a list of errors. (status code 500)
     */
    @ApiOperation(value = "Retrieves a note by Id.", nickname = "getNoteById", notes = "Use this endpoint to retrieve a specific note by its unique identifier.", response = Note.class, tags={ "READ", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Response containing a single note.", response = Note.class),
        @ApiResponse(code = 404, message = "Not found error response.", response = Error.class),
        @ApiResponse(code = 500, message = "Default error response containing a list of errors.", response = Error.class) })
    @GetMapping(
        value = "/rest/api/v1/notes/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Note> getNoteById(@ApiParam(value = "",required=true) @PathVariable("id") UUID id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"title\" : \"Note title\", \"priority\" : 0, \"createdOn\" : \"2021-01-30T08:30:00Z\", \"content\" : \"Note content\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /rest/api/v1/notes/{id} : Update a note
     * Use this endpoint to update an existing note
     *
     * @param id  (required)
     * @param noteData Contains required data to update a note (required)
     * @return Empty response indicating the operation succeded. (status code 204)
     *         or Not found error response. (status code 404)
     *         or Default error response containing a list of errors. (status code 500)
     */
    @ApiOperation(value = "Update a note", nickname = "updateNote", notes = "Use this endpoint to update an existing note", tags={ "UPDATE", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Empty response indicating the operation succeded."),
        @ApiResponse(code = 404, message = "Not found error response.", response = Error.class),
        @ApiResponse(code = 500, message = "Default error response containing a list of errors.", response = Error.class) })
    @PutMapping(
        value = "/rest/api/v1/notes/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> updateNote(@ApiParam(value = "",required=true) @PathVariable("id") UUID id,@ApiParam(value = "Contains required data to update a note" ,required=true )  @Valid @RequestBody NoteData noteData) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
